/* eslint-disable @typescript-eslint/consistent-indexed-object-style */
import type { CompileError } from './compile-error';

export type CompileABI = {
  [key: string]: any;
}[];

export interface CompileOutput {
  // Optional: not present if no errors/warnings/infos were encountered
  errors?: CompileError[];
  // This contains the file-level outputs.
  // It can be limited/filtered by the outputSelection settings.
  sources: {
    [fileName: string]: {
      // Identifier of the source (used in source maps)
      id: number;
      // The AST object
      ast: any;
    };
  };
  // This contains the contract-level outputs.
  // It can be limited/filtered by the outputSelection settings.
  contracts: {
    [fileName: string]: {
      // If the language used has no contract names, this field should equal to an empty string.
      [contractName: string]: {
        // The Ethereum Contract ABI. If empty, it is represented as an empty array.
        // See https://docs.soliditylang.org/en/develop/abi-spec.html
        abi: CompileABI;
        // See the Metadata Output documentation (serialised JSON string)
        metadata: string;
        // User documentation (natspec)
        userdoc: any;
        // Developer documentation (natspec)
        devdoc: any;
        // Intermediate representation (string)
        ir: string;
        // See the Storage Layout documentation.
        storageLayout: {
          storage: any[];
          types: object;
        };
        // EVM-related outputs
        evm: {
          // Assembly (string)
          assembly: string;
          // Old-style assembly (object)
          legacyAssembly: object;
          // Bytecode and related details.
          bytecode: {
            // Debugging data at the level of functions.
            functionDebugData?: {
              // Now follows a set of functions including compiler-internal and
              // user-defined function. The set does not have to be complete.
              [k: string]: {
                // Internal name of the function
                entryPoint?: number; // Byte offset into the bytecode where the function starts (optional)
                id?: number; // AST ID of the function definition or null for compiler-internal functions (optional)
                parameterSlots?: number; // Number of EVM stack slots for the function parameters (optional)
                returnSlots?: number; // Number of EVM stack slots for the return values (optional)
              };
            };
            // The bytecode as a hex string.
            object: string;
            // Opcodes list (string)
            opcodes: string;
            // The source mapping as a string. See the source mapping definition.
            sourceMap: string;
            // Array of sources generated by the compiler. Currently only
            // contains a single Yul file.
            generatedSources: {
              // Yul AST
              ast: any;
              // Source file in its text form (may contain comments)
              contents: string;
              // Source file ID, used for source references, same "namespace" as the Solidity source files
              id: number;
              language: string;
              name: string;
            }[];
            // If given, this is an unlinked object.
            linkReferences?: {
              [fileName: string]: {
                // Byte offsets into the bytecode.
                // Linking replaces the 20 bytes located there.
                [libName: string]: { start: number; length: number }[];
              };
            };
          };
          deployedBytecode: {
            [fileName: string]: {
              // Byte offsets into the bytecode.
              // Linking replaces the 20 bytes located there.
              [libName: string]: { start: number; length: number }[];
            };
          };
          // The list of function hashes
          methodIdentifiers: {
            // 'delegate(address)': '5c19a95c';
            [methodSignature: string]: string;
          };
          // Function gas estimates
          gasEstimates: {
            creation: {
              codeDepositCost: string;
              executionCost: string;
              totalCost: string;
            };
            external: {
              [methodSignature: string]: string;
            };
            internal: {
              [methodSignature: string]: string;
            };
          };
        };
      };
    };
  };
}
